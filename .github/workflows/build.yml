name: Build

on:
  push:
    branches-ignore:
      - gh-readonly-queue/**
  pull_request:
  merge_group:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        include:
        - os: ubuntu-latest
          features-debug: "bundled_data_dir,ffmpeg,microphone"
          features: "bundled_data_dir,ffmpeg,microphone"
          bin: ddnet-rs
          server-bin: server
        - os: macOS-latest
          features-debug: "bundled_data_dir,ffmpeg,microphone"
          features: "bundled_data_dir,ffmpeg,microphone"
          bin: ddnet-rs
          server-bin: server
        - os: windows-latest
          # ffmpeg takes years on win
          features-debug: "bundled_data_dir,microphone"
          features: "bundled_data_dir,ffmpeg,microphone"
          bin: ddnet-rs.exe
          server-bin: server.exe
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: ${{ matrix.os == 'windows-latest' && 'powershell' || 'bash {0}' }}
    steps:
    - name: Setup MSVC (Windows)
      if: contains(matrix.os, 'windows')
      uses: ilammy/msvc-dev-cmd@v1

    - name: Install Rust (Windows)
      if: contains(matrix.os, 'windows')
      run: |
        Invoke-WebRequest -Uri "https://win.rustup.rs/" -OutFile "rustup-init.exe"
        .\rustup-init.exe -y --default-toolchain stable --default-host x86_64-pc-windows-msvc
        $env:PATH = "$env:USERPROFILE\.cargo\bin;$env:PATH"
        [Environment]::SetEnvironmentVariable("PATH", $env:PATH, "User")

    - name: Install dependencies (Windows)
      if: contains(matrix.os, 'windows')
      # uses chocolatey to install ffmpeg, nasm, and pkg-config
      run: |
        if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        }
        choco install -y ffmpeg nasm pkgconfiglite
        
        $env:PATH = "C:\ProgramData\chocolatey\lib\ffmpeg\tools\ffmpeg\bin;$env:PATH"
        $env:PATH = "C:\ProgramData\chocolatey\lib\nasm\tools;$env:PATH"
        $env:PATH = "C:\ProgramData\chocolatey\lib\pkgconfiglite\tools\bin;$env:PATH"
        [Environment]::SetEnvironmentVariable("PATH", $env:PATH, "User")

    - uses: actions/checkout@v4
      with:
        submodules: true
    - run: |
        rustup toolchain install stable --profile minimal
        rustup component add clippy

    - name: Prepare Linux
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt update -y
        sudo apt install rustc cargo gcc libwayland-dev libasound2-dev nasm -y
        # for ffmpeg
        sudo apt install -y clang libavcodec-dev libavformat-dev libavutil-dev libx264-dev

    - name: Prepare macOS
      if: contains(matrix.os, 'macOS')
      run: |
        brew update || true
        brew install pkg-config autoconf automake || true
        # for ffmpeg
        brew install ffmpeg || true
        # for building molten vk
        brew install python-setuptools || true

    - name: Prepare msvc dependencies
      if: contains(matrix.os, 'windows')
      run: |
        $env:PATH = "$env:USERPROFILE\.cargo\bin;$env:PATH"
        rustup component add clippy
        rustup show
 
    - uses: Swatinem/rust-cache@v2

    - name: Build debug
      if: contains(matrix.os, 'windows') == false
      run: cargo build --verbose --features ${{ matrix.features-debug }}

    - name: Build release
      run: cargo build --release --verbose --features ${{ matrix.features }}

    - name: Build server release
      run: cargo build -p server --release --verbose --features bundled_data_dir

    - name: Clippy release
      if: contains(matrix.os, 'ubuntu')
      run: |
        cargo clippy --release --verbose --features ${{ matrix.features }} -- -D warnings
        cargo clippy -p server --release --verbose --features bundled_data_dir -- -D warnings

    - name: Prepare artifacts
      run: |
        mkdir bin-artifacts || true
        mv target/release/${{ matrix.bin }} bin-artifacts
        mv target/release/${{ matrix.server-bin }} bin-artifacts

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ddnet-rs-${{ matrix.os }}
        path: bin-artifacts

    - name: Build release with steam
      run: cargo build --release --verbose --features ${{ matrix.features }},enable_steam

    - name: Prepare artifacts
      run: |
        mkdir bin-artifacts || true
        mv target/release/${{ matrix.bin }} bin-artifacts

    - name: Upload Artifacts steam
      uses: actions/upload-artifact@v4
      with:
        name: ddnet-rs-${{ matrix.os }}-steam
        path: bin-artifacts